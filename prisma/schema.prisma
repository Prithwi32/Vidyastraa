generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  name                     String
  email                    String           @unique
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  password                 String
  emailVerified            DateTime?
  resetToken               String?
  resetTokenExpires        DateTime?
  verificationToken        String?
  verificationTokenExpires DateTime?
  enrolledCourses          EnrolledCourse[]
  payments                 Payment[]
  results                  TestResult[]

  @@map("users")
}

model Course {
  id                  String           @id @default(uuid())
  title               String
  subtitle            String?
  thumbnail           String?
  detailedDescription String
  keyTopics           String[]
  difficultyLevel     DifficultyLevel
  duration            String
  price               Float
  category            Category
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  enrolledStudents    EnrolledCourse[]
  payments            Payment[]
  tests               Test[]

  @@map("courses")
}

model EnrolledCourse {
  userId    String
  courseId  String
  progress  Float    @default(0.0)
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Chapter {
  id        String     @id @default(uuid())
  name      String     @unique
  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id])
  questions Question[]
}

model Test {
  id          String         @id @default(uuid())
  title       String
  description String?
  courseId    String
  createdAt   DateTime       @default(now())
  duration    Int
  category    TestType
  subjects    TestSubject[]
  questions   TestQuestion[]
  results     TestResult[]
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model TestQuestion {
  testId         String
  questionId     String
  marks          Int      @default(4)
  negativeMark   Float    @default(0)
  partialMarking Boolean  @default(false)
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  test           Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@id([testId, questionId])
  @@map("test_questions")
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  paymentId String   @unique
  amount    Float
  status    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model StudyMaterial {
  id          String   @id @default(uuid())
  title       String
  description String?
  type        String
  url         String
  uploadedAt  DateTime @default(now())
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id])

  @@map("study_materials")
}

model TestResponse {
  id           String   @id @default(uuid())
  testResultId String
  questionId   String
  // Stores:
  // - For MCQ/Matching/assertion-reasoning: option ID
  // - For Multi-select: comma-separated option IDs
  // - For Fill-in-blank: text answer
  answer       String[]
  marksAwarded Float // Supports partial marks
  isCorrect    Boolean
  isAnswered   Boolean  @default(false) // For unattempted tracking
  createdAt    DateTime @default(now())

  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testResult TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)

  @@unique([testResultId, questionId])
  @@map("test_responses")
}

model TestResult {
  id          String         @id @default(uuid())
  testId      String
  userId      String
  duration    Int
  totalMarks  Int
  attempted   Int
  correct     Int
  wrong       Int
  score       Float
  submittedAt DateTime       @default(now())
  responses   TestResponse[]
  test        Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testId, userId])
  @@map("test_results")
}

model Subject {
  id        String          @id @default(uuid())
  name      String          @unique
  chapters  Chapter[]
  questions Question[]
  materials StudyMaterial[]
}

enum QuestionType {
  MCQ // Multiple Choice (single correct answer)
  MULTI_SELECT // Multiple correct answers
  ASSERTION_REASON // Assertion-Reason type
  FILL_IN_BLANK // Fill in the blank
  MATCHING // Match the following 
}

model Question {
  id            String       @id @default(uuid())
  type          QuestionType @default(MCQ)
  questionText  String
  questionImage String?
  solutionText  String?
  solutionImage String?
  difficulty    Difficulty   @default(UNKNOWN)
  createdAt     DateTime     @default(now())
  chapterId     String
  subjectId     String

  // Relationships
  chapter       Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  subject       Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  testQuestions TestQuestion[]
  testResponses TestResponse[]
  options       QuestionOption[]
  matchingPairs MatchingPair[] // Keep this for storing the actual pairs

  @@map("questions")
}

model QuestionOption {
  id          String  @id @default(uuid())
  questionId  String
  optionText  String? // For matching questions: "1-(a),2-(b),3-(c),4-(d)"
  optionImage String?
  isCorrect   Boolean @default(false) // multiple opitons true for MULTI-SELECT

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_options")
}

model MatchingPair {
  id         String  @id @default(uuid())
  order      Int
  questionId String
  leftText   String // Left column item (e.g., "Country")
  leftImage  String? // Optional image for left item
  rightText  String // Right column item (e.g., "Capital")
  rightImage String? // Optional image for right item

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("matching_pairs")
}

enum TestSubject {
  PHYSICS
  CHEMISTRY
  MATHS
  BIOLOGY
}

enum DifficultyLevel {
  BEGINNER
  MODERATE
  ADVANCED
}

enum Category {
  JEE
  NEET
  CRASH_COURSES
  OTHER
}

enum TestType {
  JEE
  NEET
  CRASH_COURSES
  INDIVIDUAL
  OTHER
}

enum Difficulty {
  BEGINNER
  MODERATE
  ADVANCED
  UNKNOWN
}
