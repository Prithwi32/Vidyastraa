generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  password        String
  enrolledCourses EnrolledCourse[]
  payments        Payment[]
  results         TestResult[]

  @@map("users")
}

model Course {
  id                  String           @id @default(uuid())
  title               String
  subtitle            String?
  thumbnail           String?
  detailedDescription String
  keyTopics           String[]
  difficultyLevel     DifficultyLevel
  duration            String
  price               Float
  category            Category
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  enrolledStudents    EnrolledCourse[]
  payments            Payment[]
  tests               Test[]

  @@map("courses")
}

model EnrolledCourse {
  userId    String
  courseId  String
  progress  Float    @default(0.0)
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Question {
  id            String         @id @default(uuid())
  image         String?
  question      String
  solution      String
  options       String[]
  correctAnswer String
  subject       Subject
  createdAt     DateTime       @default(now())
  difficulty    Difficulty     @default(UNKNOWN)
  testQuestions TestQuestion[]
  testResponses TestResponse[]

  @@map("questions")
}

model Test {
  id          String         @id @default(uuid())
  title       String
  subjects    Subject[]
  description String?
  courseId    String
  createdAt   DateTime       @default(now())
  duration    Int
  category    TestType
  questions   TestQuestion[]
  results     TestResult[]
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model TestQuestion {
  testId     String
  questionId String
  marks      Int      @default(4)
  order      Int?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@id([testId, questionId])
  @@map("test_questions")
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  paymentId String   @unique
  amount    Float
  status    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model StudyMaterial {
  id          String   @id @default(uuid())
  title       String
  description String?
  type        String
  url         String
  uploadedAt  DateTime @default(now())
  subject     Subject

  @@map("study_materials")
}

model TestResponse {
  id             String     @id @default(uuid())
  testResultId   String
  questionId     String
  selectedAnswer String
  isCorrect      Boolean
  createdAt      DateTime   @default(now())
  question       Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testResult     TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)

  @@unique([testResultId, questionId])
  @@map("test_responses")
}

model TestResult {
  id          String         @id @default(uuid())
  testId      String
  userId      String
  duration    Int
  totalMarks  Int
  attempted   Int
  correct     Int
  wrong       Int
  score       Float
  submittedAt DateTime       @default(now())
  responses   TestResponse[]
  test        Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testId, userId])
  @@map("test_results")
}

enum DifficultyLevel {
  BEGINNER
  MODERATE
  ADVANCED
}

enum Category {
  JEE
  NEET
  CRASH_COURSES
  OTHER
}

enum TestType {
  JEE
  NEET
  CRASH_COURSES
  INDIVIDUAL
  OTHER
}

enum Subject {
  PHYSICS
  CHEMISTRY
  MATHS
  BIOLOGY
}

enum Difficulty {
  BEGINNER
  MODERATE
  ADVANCED
  UNKNOWN
}
